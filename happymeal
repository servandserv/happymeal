#!/bin/bash

realp() {
    echo `perl -e 'use Cwd "abs_path";print abs_path(shift)' $1`
}

usage() { printf "
Usage: path_to_happymeal/happymeal xsd2code path_to_happymeal_ini_file
       path_to_happymeal/happymeal wadl2code path_to_happymeal_ini_file
       path_to_happymealhappymeal man

Сommand:
  xsd2code Generate php,js data adaptors based on xsd schemas 
  Adaptors can translate data from xml,json,markup arrays to php,js classes and back

  examples:
    cd my_project
    vendor/happymeal xsd2code happymeal.ini

Command:
  wadl2code Generate php client adaptors based on WADL schema

  TODO


" 1>&2; exit 1; }

ini=$2
if [ -z "${ini}" ]; then
    usage
fi
if [ ! -f "${ini}" ]; then
    echo "Error: ini file not found" >&2
    exit 1
fi

iniPath=$(dirname $(realp $2))
invokePath=$(pwd)
happymealPath=$(dirname $(realp $0))
tmpDir=$(sed -n -e 's/^\s*tmpDir\s*=\s*//p' $2)
mkdir -p $tmpDir
tmpClean=$(sed -n -e 's/^\s*tmpClean\s*=\s*//p' $2)
if [ "${tmpClean}" == 1 ]; then
    #  clean tmp dir
    trap 'rm -rf -- $tmpDir' EXIT
fi

command=$1
if [ -z "${command}" ]; then
    usage
fi

f="/dev/null"
mkfile() {
    f=$2
    mkdir -p `dirname $f`
    echo -n >$f
    chmod 775 $f
}

if [ "$command" == "xsd2code" ]; then

    validators=$(sed -n -e 's/^\s*validators\s*=\s*//p' $2)
    if [ -z "${validators}" ]; then
        validators=0
    fi
    schemasPath=$(sed -n -e 's/^\s*schemasPath\s*=\s*//p' $2)
    if [ -z "${schemasPath}" ]; then
        echo "Error: schemas path variable not found" >&2
        exit 1
    fi
    codegenPath=$(sed -n -e 's/^\s*codegenPath\s*=\s*//p' $2)
    mkdir -p ${iniPath}/${codegenPath}
    if [ -z "${codegenPath}" ]; then
        echo "Error: codegen path variable not found" >&2
        exit 1
    fi
    jsPath=$(sed -n -e 's/^\s*jsPath\s*=\s*//p' $2)
    if [ "${jsPath}" ]; then
        appName=$(sed -n -e 's/^\s*appName\s*=\s*//p' $2)
        mkdir -p ${iniPath}/${jsPath}
    fi

    echo "Base path: ${iniPath}"
    echo "Path to schemas: ${schemasPath}"
    echo "Path to generated php code: ${codegenPath}"
    if [ -z "${jsPath}" ]; then
        echo "Path to generated js code: ${jsPath}"
    fi
    
    # create happymeals classes
    php $happymealPath"/consolidate_xsd2xml.php" "${happymealPath}" "classes" "schemas" > "$tmpDir"/consolidated.xml
    if [ ! $? -eq 0 ];then
        cat "$tmpDir"/consolidated.xml
        exit 1
    fi
    xsltproc --stringparam MODE "$validators" "${happymealPath}/stylesheets/xsd2classes.xsl" "$tmpDir"/consolidated.xml > "$tmpDir"/classes.txt
    cat "$tmpDir"/classes.txt | while IFS= read -r s; do
        if [[ "$s" = "#path:"* ]]
            then
            mkfile $s
        else
            echo "$s" >>$f
        fi
    done
    cp -pR $happymealPath"/classes/com" ${codegenPath}
    
    # create project classes
    php $happymealPath"/consolidate_xsd2xml.php" "${iniPath}" "${codegenPath}" "${schemasPath}" > "$tmpDir"/consolidated.xml
    if [ ! $? -eq 0 ];then
        cat "$tmpDir"/consolidated.xml
        exit 1
    fi
    echo "consolidate xsd schemas ...    OK!"
    xsltproc --stringparam MODE "$validators" "${happymealPath}/stylesheets/xsd2classes.xsl" "$tmpDir"/consolidated.xml > "$tmpDir"/classes.txt
    echo "xsd to classes code ...        OK!"

    cat "$tmpDir"/classes.txt | while IFS= read -r s; do
        if [[ "$s" = "#path:"* ]]
            then
            mkfile $s
        else
            echo "$s" >>$f
        fi
    done
    echo "classes code to files ...       OK!"
    
    #if [ "${tFlag}" == 1 ]; then
    #    xsltproc stylesheets/xsd2tests.xsl "$tmpBuildDir"/consolidated.xml > "$tmpBuildDir"/xsd2code_tests.php
    #    php "$tmpBuildDir"/xsd2code_tests.php "$oFlag"
    #fi
    
    if [ -d "${jsPath}" ]; then
        appFile=${iniPath}/${jsPath}/${appName}
        xsltproc ${happymealPath}/stylesheets/xsd2js.xsl ${tmpDir}/consolidated.xml > ${appFile}.js
        # min
        java -jar ${happymealPath}/tools/yuicompressor/yuicompressor-2.4.8.jar --type js ${appFile}.js > ${appFile}.min.js
        cat ${happymealPath}/web/js/Happymeal.js ${happymealPath}/web/js/libs/sax.js > ${iniPath}/${jsPath}/Happymeal.js
        java -jar ${happymealPath}/tools/yuicompressor/yuicompressor-2.4.8.jar --type js ${iniPath}/${jsPath}/Happymeal.js > ${iniPath}/${jsPath}/Happymeal.min.js
    fi
    exit 0;
    
elif [ "$command" == "wadl2code" ]; then

    OPTIND=2
    while getopts "s:o:" optname
        do
        case "$optname" in
            s)    sFlag=$(realp $OPTARG)
                ;;
            o)    oFlag=$(realp $OPTARG)
                ;;
            :)    echo "Option -$OPTARG requires an argument" >&2
                exit 1
                ;;
            ?)    echo "Unknown option -$OPTARG" >&2
                exit 1
                ;;
            *)    echo "Unknown error while processing options" >&2
                exit 1
        esac
    done
    shift $((OPTIND-1))

    if [ -z "$oFlag" ]; then
        usage
    fi
    if [ -z "$sFlag" ]; then
        usage
    fi
    if [ ! -d "$sFlag" ]; then
        echo "Ошибка: не найден каталог схем" >&2
        exit 1
    fi
    if [ ! -d "$oFlag" ]; then
        echo "Ошибка: не найден каталог классов" >&2
        exit 1
    fi

    echo "Path to schemas: $sFlag"
    echo "Path to generated php classes code: $oFlag"

    mkdir -p "$oFlag/web.codegen/api"
    tmpBuildDir=$oFlag"/tmp_happymeal"
    #  clean
    #trap 'rm -rf -- $tmpBuildDir' EXIT
    mkdir -p "$tmpBuildDir"
    # каталог классов не чистим
    rm -rf "$tmpBuildDir"/*

    find "$sFlag"/$2 -type f -name *.wadl | while read j; do
        # манипуляции с исходным wadl
        # заменим ссылки на требуемый для роутера формат {var} меняем на :p
        cat $j | sed -e "s/{\([a-zA-Z0-9]*\)}/:\1/g" > "$tmpBuildDir"/wadl.xml
        cat $j | grep "xmlns:" | while read ns; do
        # Не используем для подмены обычные пространства имен
            if [[ ! $ns =~ http ]]; then
                # нашли префикс
                pref=$(echo "$ns" | sed -e 's/^xmlns:\([a-z0-9]*\)=.*/\1/')
                # выкусили пространство имен
                namespace=$( echo "$ns" | sed -e 's/^[^"]*"//; s/".*//')
                # подменили префикс пространством в узле representation
                sed -i -e "s/element=\"${pref}\:/element=\"${namespace}\:/g"  "$tmpBuildDir"/wadl.xml
            fi
        done
        
        # выкусим номер версии api и составим по нему имя скрипта который связан с этой версией
        # версии в адресах записываются таким образом .../api/v[1-9]\.[0-9]{1,2}/... превращаем это в файл api\.v{0-9}-{0-9}{1,2}.php
        base=$( cat $j | grep "resources *base" | sed -e 's/^[^"]*"//; s/".*//' )
        api="test"
        if [[ $base =~ api(\/v[0-9]{1,2}\.[0-9]{1,2}\/)? ]]
            then
            api=$( echo $base | sed -e 's/.*\(api\)/\1/; s/\/$//' | tr "." "-" | tr "/" "." )".php"
        fi
        
        xsltproc --stringparam WADL ${j/#*web} --stringparam API $api --stringparam DEST ${oFlag}/web.codegen/api ${happymealPath}/stylesheets/wadl2code.xsl "$tmpBuildDir"/wadl.xml  > "$tmpBuildDir"/wadl2code.txt
        cat "$tmpBuildDir"/wadl2code.txt | while IFS= read -r s; do
            if [[ "$s" = "#path:"* ]]
                then
                mkfile $s
            else
                echo "$s" >>$f
            fi
        done
        #echo "wadl code to files ...       OK!"
        #xsltproc --stringparam WADL ${j/#*web} --stringparam API $api --stringparam OUTDIR "$oFlag" stylesheets/wadl2sitemap.xsl "$tmpBuildDir"/wadl.xml  > "$oFlag"/web/sitemap.xml
    done

    chmod -R 755 "$oFlag"
    #rm -rf "$tmpBuildDir"
    cd "$invokePath"
    exit 0;

else
    usage
fi
